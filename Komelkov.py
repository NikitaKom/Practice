import logging
import psycopg2
from psycopg2.extras import DictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from googleapiclient.discovery import build

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_CONFIG = {
    "dbname": "Practice",
    "user": "postgres",
    "password": "12345",
    "host": "localhost",
    "port": 5432
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è YouTube API
YOUTUBE_API_KEY = "AIzaSyCN3ZCdLR8Rb3-gXaEj6-pu7oIW2px4CnU"
youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)

# –ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query if update.callback_query else None
    if query:
        await query.answer()

    video_message_id = context.user_data.get("video_message_id")
    if video_message_id:
        try:
            await query.message.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=video_message_id
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    context.user_data.clear()

    if query:
        await query.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

    collection_button = InlineKeyboardButton("–ö–æ–ª–µ–∫—Ü—ñ—ó", callback_data="my_collections")
    reply_markup = InlineKeyboardMarkup([[collection_button]])

    if query:
        await query.message.edit_reply_markup(reply_markup)

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
AWAIT_SEARCH_QUERY = "AWAIT_SEARCH_QUERY"
AWAIT_COLLECTION_NAME = "AWAIT_COLLECTION_NAME"
AWAIT_DELETE_VIDEO = "AWAIT_DELETE_VIDEO"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å–æ—Ä–∞
def get_cursor():
    conn = psycopg2.connect(**DB_CONFIG)
    return conn.cursor(cursor_factory=DictCursor)

# –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = update.message.from_user.username  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ
                cur.execute("SELECT id FROM users WHERE id = %s", (user_id,))
                if not cur.fetchone():  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ
                    cur.execute("INSERT INTO users (id, username) VALUES (%s, %s)", (user_id, username))
                    conn.commit()

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–ª–µ–∫—Ü—ñ—è "Favorites" —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cur.execute(
                    "SELECT id FROM collections WHERE user_id = %s AND name = 'Favorites'", (user_id,)
                )
                if not cur.fetchone():  # –Ø–∫—â–æ –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ
                    cur.execute(
                        "INSERT INTO collections (user_id, name) VALUES (%s, 'Favorites')", (user_id,)
                    )
                    conn.commit()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç—É: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é."
    )

# –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫—É –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["state"] = AWAIT_SEARCH_QUERY  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø–æ—à—É–∫—É"
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ –Ω–∞ YouTube.")

# –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def search_videos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É
    if context.user_data.get("state") != AWAIT_SEARCH_QUERY:
        return

    query = update.message.text  # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É
    try:
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ YouTube API –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ
        search_response = youtube.search().list(
            q=query,
            part="snippet",
            type="video",
            maxResults=5  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        ).execute()

        # –Ø–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not search_response['items']:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
            context.user_data["state"] = None  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
            return

        # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –≤—ñ–¥–µ–æ —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        for item in search_response['items']:
            video_id = item['id']['videoId']  # –û—Ç—Ä–∏–º—É—î–º–æ ID –≤—ñ–¥–µ–æ
            title = item['snippet']['title']  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–¥–µ–æ
            description = item['snippet']['description'][:200]  # –û–ø–∏—Å –≤—ñ–¥–µ–æ (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤)

            keyboard = [[
                InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ YouTube", url=f"https://www.youtube.com/watch?v={video_id}"),
                InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó", callback_data=f"add_{video_id}")
            ]]  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó

            reply_markup = InlineKeyboardMarkup(keyboard)  # –§–æ—Ä–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–µ–æ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                f"üî¥ {title}\n\n{description}\nhttps://www.youtube.com/watch?v={video_id}",
                reply_markup=reply_markup
            )

        context.user_data["state"] = None  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É
    except Exception as e:
        # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
async def create_collection_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–æ–ª–µ–∫—Ü—ñ—ó
    context.user_data["state"] = AWAIT_COLLECTION_NAME

    if update.message:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /create_collection
        command_and_text = update.message.text.split(" ", 1)
        if len(command_and_text) > 1:
            collection_name = command_and_text[1]  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤—É –∫–æ–ª–µ–∫—Ü—ñ—ó
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª–µ–∫—Ü—ñ—ó –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")
            return

        user_id = update.message.from_user.id

        try:
            with psycopg2.connect(**DB_CONFIG) as conn:
                with conn.cursor() as cur:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–µ–∫—Ü—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    cur.execute(
                        "SELECT id FROM collections WHERE user_id = %s AND name = %s",
                        (user_id, collection_name)
                    )
                    if cur.fetchone():
                        await update.message.reply_text(f"–ö–æ–ª–µ–∫—Ü—ñ—è –∑ –Ω–∞–∑–≤–æ—é '{collection_name}' –≤–∂–µ —ñ—Å–Ω—É—î.")
                        return

                    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–æ–ª–µ–∫—Ü—ñ—é –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                    cur.execute(
                        "INSERT INTO collections (user_id, name) VALUES (%s, %s)",
                        (user_id, collection_name)
                    )
                    conn.commit()

            await update.message.reply_text(f"–ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
            context.user_data["state"] = None  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω

        except Exception as e:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
            context.user_data["state"] = None

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª–µ–∫—Ü—ñ—ó –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")

# –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ–ª–µ–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def my_collections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT id, name FROM collections WHERE user_id = %s",
                    (user_id,)
                )
                collections = cur.fetchall()

        buttons = []
        for collection in collections:
            collection_id = collection[0]
            collection_name = collection[1]

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
            buttons.append([
                InlineKeyboardButton(
                    f"{collection_name}",
                    callback_data=f"view_{collection_id}_1"
                )
            ])

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó (—è–∫—â–æ –Ω–µ "favorites")
            if collection_name.lower() != "favorites":
                buttons[-1].append(
                    InlineKeyboardButton(
                        "–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_collection_{collection_id}"
                    )
                )

        reply_markup = InlineKeyboardMarkup(buttons)

        if update.message:
            await update.message.reply_text("–í–∞—à—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó:", reply_markup=reply_markup)
        elif update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text("–í–∞—à—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó:", reply_markup=reply_markup)

    except Exception as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        if update.message:
            await update.message.reply_text(error_message)
        elif update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(error_message)

# –ü–µ—Ä–µ–≥–ª—è–¥ –≤–º—ñ—Å—Ç—É –∫–æ–ª–µ–∫—Ü—ñ—ó
async def view_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ callback_data
    data = query.data.split("_")
    collection_id = int(data[1])
    page = int(data[2]) if len(data) > 2 else 1  # –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Ç–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1
    items_per_page = 5  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–µ–æ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                cur.execute(
                    """
                    SELECT v.youtube_id, v.title
                    FROM collection_videos cv
                    JOIN videos v ON cv.video_id = v.id
                    WHERE cv.collection_id = %s
                    ORDER BY cv.added_at DESC
                    LIMIT %s OFFSET %s
                    """,
                    (collection_id, items_per_page, (page - 1) * items_per_page)
                )
                videos = cur.fetchall()

                # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó
                cur.execute(
                    "SELECT COUNT(*) FROM collection_videos WHERE collection_id = %s",
                    (collection_id,)
                )
                total_videos = cur.fetchone()[0]

        # –Ø–∫—â–æ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ–º–∞—î –≤—ñ–¥–µ–æ
        if not videos:
            await query.message.reply_text("–ö–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
            return

        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ YouTube
        video_list = "\n".join([f"{i + 1}. [{video[1]}](https://www.youtube.com/watch?v={video[0]})"
                               for i, video in enumerate(videos)])

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        total_pages = (total_videos + items_per_page - 1) // items_per_page
        navigation_buttons = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"view_{collection_id}_{page - 1}"))
        if page < total_pages:
            navigation_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"view_{collection_id}_{page + 1}"))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π: –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        action_buttons = [
            InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_video_start_{collection_id}_{page}"),
            InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data="my_collections")
        ]

        # –§–æ—Ä–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ç–∫—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        reply_markup = InlineKeyboardMarkup([navigation_buttons, action_buttons] if navigation_buttons or action_buttons else None)

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–º—ñ—Å—Ç–æ–º –∫–æ–ª–µ–∫—Ü—ñ—ó
        message = await query.message.edit_text(
            f"–í–º—ñ—Å—Ç –∫–æ–ª–µ–∫—Ü—ñ—ó (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}):\n{video_list}",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        context.user_data["view_message_id"] = message.message_id

    except Exception as e:
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        await query.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
async def add_to_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data.split("_", 1)
    video_id = data[1]  # –û—Ç—Ä–∏–º—É—î–º–æ ID –≤—ñ–¥–µ–æ –∑ callback_data

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–µ–æ –≤ –±–∞–∑—ñ
                cur.execute("SELECT id FROM videos WHERE youtube_id = %s", (video_id,))
                video = cur.fetchone()

                # –Ø–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤ –±–∞–∑—É
                if not video:
                    cur.execute(
                        """
                        INSERT INTO videos (youtube_id, title, added_at)
                        VALUES (%s, %s, NOW())
                        RETURNING id
                        """,
                        (video_id, query.message.text.split("\n")[0])
                    )
                    video = cur.fetchone()

                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cur.execute(
                    "SELECT id, name FROM collections WHERE user_id = %s",
                    (user_id,)
                )
                collections = cur.fetchall()

                # –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–ª–µ–∫—Ü—ñ—ó
                buttons = [
                    [InlineKeyboardButton(name, callback_data=f"select_collection_{collection_id}")]
                    for collection_id, name in collections
                ]
                buttons.append([InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–ª–µ–∫—Ü—ñ—ó
                reply_markup = InlineKeyboardMarkup(buttons)
                await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–µ–∫—Ü—ñ—é:", reply_markup=reply_markup)

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≤—ñ–¥–µ–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
                context.user_data["add_video_id"] = video[0]
    except Exception as e:
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        await query.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def select_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data.split("_", 2)
    collection_id = int(data[2])

    video_id = context.user_data.get("add_video_id")

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–ª–µ–∫—Ü—ñ—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cur.execute(
                    "SELECT id FROM collections WHERE id = %s AND user_id = %s",
                    (collection_id, user_id)
                )
                collection = cur.fetchone()

                if not collection:
                    await query.message.reply_text("–ö–æ–ª–µ–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                    return

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —Ü–µ –≤—ñ–¥–µ–æ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó
                cur.execute(
                    """
                    SELECT 1 FROM collection_videos 
                    WHERE collection_id = %s AND video_id = %s
                    """,
                    (collection_id, video_id)
                )
                existing_video = cur.fetchone()

                if existing_video:
                    await query.message.reply_text("–¶–µ –≤—ñ–¥–µ–æ –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—î –≤ —Ü—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó.")
                    return

                # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–µ–æ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î
                cur.execute(
                    """
                    INSERT INTO collection_videos (collection_id, video_id, added_at)
                    VALUES (%s, %s, NOW())
                    """,
                    (collection_id, video_id)
                )
                conn.commit()

                await query.message.reply_text("–í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó!")

    except Exception as e:
        await query.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
async def delete_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ callback_data —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    collection_id = query.data.split("_", 2)[2]
    user_id = query.from_user.id

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–µ–∫—Ü—ñ—è —Ç–∞ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                cur.execute(
                    "SELECT name FROM collections WHERE id = %s AND user_id = %s",
                    (int(collection_id), user_id)
                )
                collection = cur.fetchone()

                # –Ø–∫—â–æ –∫–æ–ª–µ–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if not collection:
                    await query.message.reply_text("–ö–æ–ª–µ–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.")
                    return

                # –Ø–∫—â–æ —Ü–µ –∫–æ–ª–µ–∫—Ü—ñ—è "Favorites", —ó—ó –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏
                if collection[0].lower() == "favorites":
                    await query.message.reply_text("–ö–æ–ª–µ–∫—Ü—ñ—é 'Favorites' –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏.")
                    return

                # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–µ–æ –∑ —Ü—ñ—î—ó –∫–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ —Å–∞–º—É –∫–æ–ª–µ–∫—Ü—ñ—é
                cur.execute("DELETE FROM collection_videos WHERE collection_id = %s", (collection_id,))
                cur.execute("DELETE FROM collections WHERE id = %s", (collection_id,))
                conn.commit()

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
        await query.message.reply_text(f"–ö–æ–ª–µ–∫—Ü—ñ—é '{collection[0]}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    except Exception as e:
        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        await query.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
async def delete_video_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ callback_data: collection_id —Ç–∞ page
    data = query.data.split("_")
    collection_id = int(data[3])
    page = int(data[4])

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    context.user_data["state"] = AWAIT_DELETE_VIDEO
    context.user_data["collection_id"] = collection_id
    context.user_data["page"] = page
    context.user_data["view_message_id"] = query.message.message_id  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—é

    items_per_page = 5

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–µ–æ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                cur.execute(
                    """
                    SELECT v.id, v.title
                    FROM collection_videos cv
                    JOIN videos v ON cv.video_id = v.id
                    WHERE cv.collection_id = %s
                    ORDER BY cv.added_at DESC
                    LIMIT %s OFFSET %s
                    """,
                    (collection_id, items_per_page, (page - 1) * items_per_page)
                )
                videos = cur.fetchall()

        # –Ø–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ–º–∞—î –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó
        if not videos:
            await query.message.reply_text("–ö–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
        delete_buttons = [
            InlineKeyboardButton(f"{i + 1}.", callback_data=f"delete_video_{collection_id}_{video[0]}")
            for i, video in enumerate(videos)
        ]

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
        cancel_button = InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")

        # –§–æ—Ä–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
        reply_markup = InlineKeyboardMarkup([delete_buttons, [cancel_button]])

        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ
        await query.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=reply_markup
        )

    except Exception as e:
        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        await query.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def delete_video_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    collection_id = int(data[2])  # collection_id
    video_id = int(data[3])  # video_id
    page = int(data[4]) if len(data) > 4 else 1  # –°—Ç–æ—Ä—ñ–Ω–∫–∞, –Ω–∞ —è–∫—ñ–π –º–∏ –ø—Ä–∞—Ü—é–≤–∞–ª–∏

    try:
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "DELETE FROM collection_videos WHERE collection_id = %s AND video_id = %s",
                    (collection_id, video_id)
                )
                conn.commit()

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ
        await query.message.delete()

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–º—ñ—Å—Ç–æ–º –∫–æ–ª–µ–∫—Ü—ñ—ó
        view_message_id = context.user_data.get("view_message_id")
        if view_message_id:
            try:
                await query.bot.delete_message(
                    chat_id=query.message.chat.id,
                    message_id=view_message_id
                )
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–º—ñ—Å—Ç–æ–º –∫–æ–ª–µ–∫—Ü—ñ—ó: {str(e)}")

        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
        context.user_data.clear()

    except Exception as e:
        await query.message.edit_text(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
def main():
    application = Application.builder().token("7972749516:AAGL0T_5wsQSya47V3J13liAWlLMgLi36Os").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("search", start_search))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_videos))
    application.add_handler(CommandHandler("create_collection", create_collection_start))
    application.add_handler(CommandHandler("my_collections", my_collections))
    application.add_handler(CallbackQueryHandler(my_collections, pattern=r"my_collections"))
    application.add_handler(CallbackQueryHandler(add_to_collection, pattern=r"^add_.*"))
    application.add_handler(CallbackQueryHandler(select_collection, pattern=r"^select_.*"))
    application.add_handler(CallbackQueryHandler(delete_collection, pattern=r"delete_collection_.*"))
    application.add_handler(CallbackQueryHandler(view_collection, pattern=r"view_\d+(_\d+)?"))
    application.add_handler(CallbackQueryHandler(delete_video_start, pattern="^delete_video_start_"))
    application.add_handler(CallbackQueryHandler(delete_video_confirm, pattern="^delete_video_"))
    application.add_handler(CallbackQueryHandler(cancel, pattern=r"cancel"))

    application.run_polling()

if __name__ == "__main__":
    main()
